package org.techtown.martapp2;

import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.constraint.ConstraintLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;

import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.sdsmdg.tastytoast.TastyToast;

import org.w3c.dom.Text;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import io.card.payment.CardIOActivity;
import io.card.payment.CreditCard;

public class ListviewActivity extends AppCompatActivity {

    private FirebaseDatabase firebaseDatabase=FirebaseDatabase.getInstance();
    private DatabaseReference databaseReference=firebaseDatabase.getReference();
    private DatabaseReference paymentData=firebaseDatabase.getReference();
    private DatabaseReference doorData=firebaseDatabase.getReference();

    private DatabaseReference arsaleData=firebaseDatabase.getReference();
    private DatabaseReference mmieData=firebaseDatabase.getReference();
    private DatabaseReference numberData=firebaseDatabase.getReference("number");

    private DatabaseReference fabdata=firebaseDatabase.getReference("fab");

    private ChildEventListener childEventListener;

    ListView listView;

    TextView finalprice;

    List<String> Array=new ArrayList<String>();
    ArrayAdapter<String> adapter;
    ArrayList<String> key=new ArrayList<>();
    String key1;

    String userName;
    String userPrice;
    int pay=0;
    String mesg;

    productData proData;


    Context context=ListviewActivity.this;

    //FloatingActionButton doorbutton;

    private Animation fab_open,fab_close;
    private Boolean isFabOpen=false;
    private FloatingActionButton fab0,fab1,fab2,fab3;
    private TextView text1,text2,text3;

    ListView paylist;
    ArrayAdapter<String> payadapter;

    TextView firstText;
    TextView secondText;

    //장바구니 선택 토글 버튼
    ToggleButton cost0;
    ToggleButton cost1000;

    int saleprice;  //선택한 할인 가격

    ArrayList<String> paykey=new ArrayList<>();

    int position2=0;

    int REQUEST_SCAN=101;
    String resultDisplayStr;
    String resultDisplayStr1;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_listview);
        getSupportActionBar().setTitle("구매할 물품 리스트");

        listView = (ListView) findViewById(R.id.list_item);
        finalprice = (TextView) findViewById(R.id.finalprice);

        fab_open= AnimationUtils.loadAnimation(getApplicationContext(),R.anim.fab_open);
        fab_close=AnimationUtils.loadAnimation(getApplicationContext(),R.anim.fab_close);

        text1=(TextView)findViewById(R.id.tt1);
        text2=(TextView)findViewById(R.id.tt2);
        text3=(TextView)findViewById(R.id.tt3);

        fab0=(FloatingActionButton)findViewById(R.id.fab0);
        fab1=(FloatingActionButton)findViewById(R.id.fab1);
        fab2=(FloatingActionButton)findViewById(R.id.fab2);
        fab3=(FloatingActionButton)findViewById(R.id.fab3);

        userName="user"+new Random().nextInt(10000);
        userPrice=""+new Random().nextInt(500000);

        adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,android.R.id.text1);
        listView.setAdapter(adapter);

        if(finalprice.getText().equals("0")){
            //doorbutton.show();
            //doorButton();
        }

        //fab0누르면 애니메이션 실행
        fab0.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isFabOpen) {
                    button_close();
                } else {
                    button_open();
                }
            }
        });
        fab1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(context, "직원 호출 선택", Toast.LENGTH_SHORT).show();
                fabdata.child("fab").setValue("sos");
                button_close();
            }
        });

        fab2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(context, "술 선택", Toast.LENGTH_SHORT).show();
                fabdata.child("fab").setValue("drink");
                button_close();
            }
        });
        fab3.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Toast.makeText(context, "담배 선택", Toast.LENGTH_SHORT).show();
                fabdata.child("fab").setValue("smoke");
                button_close();
            }
        });


        //firebase에서 상품명&가격 받아오기
        databaseReference.child("name").addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                adapter.clear();
                key.clear();
                pay=0;
                for(DataSnapshot messageData:dataSnapshot.getChildren()){

                    proData = messageData.getValue(productData.class);
                    adapter.add(proData.getProductName() + "  :   " + proData.getProductmessage()+" 원                                                          ");
                    key.add(messageData.getKey());
                    key1=messageData.getKey();

                    mesg = proData.getProductmessage();
                    pay += Integer.parseInt(mesg);

                    finalprice.setText(String.valueOf(pay));

                    //doorbutton.hide();

                    numberData.child("number").setValue(String.valueOf(adapter.getCount()));

                    //proData=dataSnapshot.getValue(productData.class);
                    //adapter.add(proData.getProductName()+"  :  "+proData.getProductmessage());
                    //Array.add(proData.getProductName()+"  :  "+proData.getProductmessage());
                }
                adapter.notifyDataSetChanged();
                listView.setSelection(adapter.getCount()-1);

                itemDelete();
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Log.e("Read Fail","Error");
            }
        });


        databaseReference.child("name").addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {
                //폴더가 추가되었을 때
            }

            @Override
            public void onChildChanged(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {
                //폴더 명이 바뀌었을 때
            }

            @Override
            public void onChildRemoved(@NonNull DataSnapshot dataSnapshot) {
                //폴더가 지워졌을 때
            }

            @Override
            public void onChildMoved(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {
                //폴더가 이동되었을 때
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                //취소되었을 때
            }
        });


        //결제 버튼을 눌렀을 때
        final Button payButton=(Button)findViewById(R.id.paybutton);
        payButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                //proData=new productData(userName,userPrice);
                //doorData.child("iot").push().setValue(proData);

                Context context=ListviewActivity.this;
                if((context!=null)&&(!((ListviewActivity) context).isFinishing())){
                    final Dialog dialog=new Dialog(context);
                    dialog.requestWindowFeature(getWindow().FEATURE_NO_TITLE);
                    dialog.setContentView(R.layout.activity_coupon_dialog);

                    paylist=dialog.findViewById(R.id.price_list);
                    payadapter=new ArrayAdapter<String>(getApplication(),android.R.layout.simple_list_item_single_choice,new ArrayList<String>());
                    paylist.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
                    paylist.setAdapter(payadapter);

                    //adapter.add(userName+ "  :   " + userPrice+" 원");   //test barcode programing

                    cost0=dialog.findViewById(R.id.cost0);
                    cost0.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                        @Override
                        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                            if(isChecked){
                                cost0.setSelected(true);
                                cost1000.setSelected(false);
                            }else{
                                cost0.setSelected(false);
                            }
                        }
                    });

                    cost1000=dialog.findViewById(R.id.cost1000);
                    cost1000.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                        @Override
                        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                            if(isChecked){
                                cost1000.setSelected(true);
                                cost0.setSelected(false);
                                int cash=Integer.parseInt(secondText.getText().toString());
                                cash+=1000;
                                secondText.setText(String.valueOf(cash));

                                //여기에 firebase 정보 넘겨주기

                            }else{
                                cost1000.setSelected(false);
                                int cash=Integer.parseInt(secondText.getText().toString());
                                cash-=1000;
                                secondText.setText(String.valueOf(cash));
                            }
                        }
                    });


                    //닫기 버튼 클릭
                    Button close_btn=dialog.findViewById(R.id.closebutton);
                    close_btn.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            dialog.dismiss();
                        }
                    });

                    //할인 받기 전 TextView
                    firstText=dialog.findViewById(R.id.firstprice);
                    firstText.setText(finalprice.getText());

                    //할인 받은 후 TextView
                    secondText=dialog.findViewById(R.id.secondprice);
                    paylistView();

                    if(secondText.getText().equals("0원")){
                        secondText.setText(firstText.getText().toString());
                    }

                    paylist.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                        @Override
                        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                            String s=paylist.getItemAtPosition(position).toString();
                            Toast.makeText(getApplication(), s, Toast.LENGTH_SHORT).show();
                            saleprice=Integer.parseInt(s);

                            int price;    int pay;
                            price=Integer.parseInt(firstText.getText().toString());
                            pay=price-saleprice;
                            String text=String.valueOf(pay);

                            paymentData.child("payment").setValue(text);

                            secondText.setText(text);
                            position2=position;
                        }
                    });


                    Button positive_btn = dialog.findViewById(R.id.positive_btn);
                    positive_btn.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            /*paymentData.child("statue").setValue("p");
                            Snackbar.make(v,"카드를 리더기에 접촉시켜주세요.",Snackbar.LENGTH_SHORT).show();
                            paymentData.child("payment").setValue(secondText.getText().toString());
                            */
                            final Context context=ListviewActivity.this;
                            if((context!=null)&&(!((ListviewActivity) context).isFinishing())) {
                                final Dialog dialog = new Dialog(context);
                                dialog.requestWindowFeature(getWindow().FEATURE_NO_TITLE);
                                dialog.setContentView(R.layout.activity_second_dialog);

                                Button close_btn=dialog.findViewById(R.id.closebutton);
                                close_btn.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        dialog.dismiss();
                                    }
                                });

                                Button back_btn=dialog.findViewById(R.id.backbutton);
                                back_btn.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        dialog.dismiss();
                                    }
                                });

                                Button rfid_btn=dialog.findViewById(R.id.rfid_btn);     //rfid 결제
                                rfid_btn.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        paymentData.child("statue").setValue("p");
                                        //Snackbar.make(v,"카드를 리더기에 접촉시켜주세요.",Snackbar.LENGTH_SHORT).show();    //스냅바 왜 안되는거야ㅠㅠ
                                        TastyToast.makeText(getApplication(),"카드를 리더기에 접촉시켜주세요.",TastyToast.LENGTH_LONG,TastyToast.INFO);
                                        paymentData.child("payment").setValue(secondText.getText().toString());
                                        dialog.dismiss();
                                    }
                                });

                                Button credit_btn=dialog.findViewById(R.id.credit_btn);     //온라인 결제
                                credit_btn.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        //카드 선택 알림창
                                        cardscan();
                                    }
                                });
                                dialog.show();
                            }

                            dialog.dismiss();
                        }
                    });

                    Button nagative_btn=dialog.findViewById(R.id.nagative_btn);
                    nagative_btn.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            dialog.dismiss();
                        }
                    });
                    dialog.show();
                }
            }
        });


        //결제 완료 알림창 및 리스트 뷰 클리어
        paymentData=firebaseDatabase.getReference("payment");
        paymentData.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                for(DataSnapshot messageData:dataSnapshot.getChildren()){
                    String msg2=messageData.getValue().toString();

                    if(!ListviewActivity.this.isFinishing()) {

                        if (msg2.equals("c")) {
                            /*new AlertDialog.Builder(ListviewActivity.this)
                                    .setTitle("확인")
                                    .setMessage("결제가 완료되었습니다.")
                                    .setIcon(android.R.drawable.ic_dialog_dialer)
                                    .setPositiveButton("확인", new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            databaseReference.getRoot().child("name").removeValue();

                                            adapter.notifyDataSetChanged();
                                            int a=Integer.parseInt(firstText.getText().toString());
                                            int b=Integer.parseInt(secondText.getText().toString());
                                            if(a!=b) {
                                                arsaleData.getRoot().child("sale").child(paykey.get(position2)).removeValue();
                                            }
                                            finalprice.setText("0");
                                            //arsaleData.child("sale").setValue("");

                                            paymentData.child("statue").setValue("");
                                            mmieData.child("mmie").child("mmie").setValue("OK");

                                            dialog.dismiss();
                                        }
                                    })
                                    .create().show();*/
                            final Dialog dialog=new Dialog(ListviewActivity.this);
                            dialog.requestWindowFeature(getWindow().FEATURE_NO_TITLE);
                            dialog.setContentView(R.layout.payokdialog);

                            Button okbutton=dialog.findViewById(R.id.payokdialog_yes);
                            okbutton.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    databaseReference.getRoot().child("name").removeValue();

                                    adapter.notifyDataSetChanged();
                                    int a=Integer.parseInt(firstText.getText().toString());
                                    int b=Integer.parseInt(secondText.getText().toString());
                                    if(a!=b) {
                                        arsaleData.getRoot().child("sale").child(paykey.get(position2)).removeValue();
                                    }
                                    finalprice.setText("0");
                                    //
                                    // arsaleData.child("sale").setValue("");

                                    paymentData.child("statue").setValue("");
                                    mmieData.child("mmie").child("mmie").setValue("OK");

                                    //doorData.child("door").child("door").setValue("Open");

                                    //여기에 영수증 출력 서버 데이터 보내기 코드 작성
                                    paymentData.child("statue").setValue("j");

                                    Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                                    startActivity(intent);

                                    dialog.dismiss();
                                }
                            });

                            Button nobutton=dialog.findViewById(R.id.payokdialog_no);
                            nobutton.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    databaseReference.getRoot().child("name").removeValue();

                                    adapter.notifyDataSetChanged();
                                    int a=Integer.parseInt(firstText.getText().toString());
                                    int b=Integer.parseInt(secondText.getText().toString());
                                    if(a!=b) {
                                        arsaleData.getRoot().child("sale").child(paykey.get(position2)).removeValue();
                                    }
                                    finalprice.setText("0");
                                    //arsaleData.child("sale").setValue("");

                                    paymentData.child("statue").setValue("");
                                    //mmieData.child("mmie").child("mmie").setValue("OK");

                                    Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                                    startActivity(intent);

                                    dialog.dismiss();
                                }
                            });
                            dialog.show();
                        }
                    }

                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });

    }

    //리스트의 아이템을 클릭 했을 때 삭제하는 메소드
    private void itemDelete(){
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {

                if((context!=null)&&(!((ListviewActivity) context).isFinishing())){
                    new AlertDialog.Builder(context)
                            .setTitle("안내")
                            .setMessage("해당 물건을 삭제하시겠습니까?")
                            .setIcon(android.R.drawable.ic_dialog_alert)
                            .setPositiveButton("예", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    adapter.notifyDataSetChanged();
                                    databaseReference.getRoot().child("name").child(key.get(position)).removeValue();
                                    //databaseReference.setValue(null);     //이거 코드 넣으면 한꺼번에 지워짐;; 난 이걸 바란게 아니에요...
                                    //databaseReference.getRoot().child("name").child(key1).removeValue();
                                    //Toast.makeText(ListviewActivity.this, "삭제하였습니다.", Toast.LENGTH_SHORT).show();

                                    TastyToast.makeText(getApplicationContext(), "삭제되었습니다.", TastyToast.LENGTH_SHORT, TastyToast.ERROR);

                                    if(position==0){
                                        finalprice.setText("0");
                                        //numberData.child("number").setValue("0");
                                        //doorbutton.show();
                                        //doorButton();
                                    }
                                }
                            })
                            .setNegativeButton("아니요", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    dialog.dismiss();
                                }
                            }).create().show();
                }


            }

        });
    }

    //문 여는 fab 버튼인데 없어짐 내가 뿌심
    /*private void doorButton(){
        doorbutton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                doorData.child("door").setValue("Open");
                TastyToast.makeText(getApplication(),"출입문이 열립니다.",TastyToast.LENGTH_LONG,TastyToast.INFO);
            }
        });
    }*/

    private void paylistView(){
        arsaleData.child("sale").addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                for(DataSnapshot message:dataSnapshot.getChildren()){
                    String mes=message.getValue().toString();
                    payadapter.add(mes);
                    paykey.add(message.getKey());

                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }
        });
    }

    private void cardscan(){
        final Context context=ListviewActivity.this;
        if((context!=null)&&(!((ListviewActivity) context).isFinishing())) {
            final Dialog dialog = new Dialog(context);
            dialog.requestWindowFeature(getWindow().FEATURE_NO_TITLE);
            dialog.setContentView(R.layout.activity_third_dialog);
            TextView card_number=dialog.findViewById(R.id.card_number);
            TextView card_since=dialog.findViewById(R.id.card_since);
            Button card_add_btn=dialog.findViewById(R.id.card_add_btn);
            card_add_btn.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    dialog.dismiss();
                    //card io: card scan activity 불러오기
                    Intent intent=new Intent(ListviewActivity.this, CardIOActivity.class);
                    intent.putExtra(CardIOActivity.EXTRA_REQUIRE_EXPIRY,true)
                            .putExtra(CardIOActivity.EXTRA_REQUIRE_CVV,false)
                            .putExtra(CardIOActivity.EXTRA_REQUIRE_POSTAL_CODE,false);
                    startActivityForResult(intent, REQUEST_SCAN);
                }
            });
            Button close_btn=dialog.findViewById(R.id.closebutton3);
            close_btn.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    dialog.dismiss();
                }
            });

            Button pay_btn=dialog.findViewById(R.id.pay_btn);
            pay_btn.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Toast toast=TastyToast.makeText(getApplicationContext(),"결제 중입니다!",TastyToast.LENGTH_SHORT,TastyToast.SUCCESS);
                    toast.setGravity(Gravity.TOP,0,300);
                    time_delay();
                    //paymentData.child("statue").setValue("c");
                    dialog.dismiss();
                }
            });
            dialog.show();
        }
    }

    private void time_delay(){
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                paymentData.child("statue").setValue("c");
            }
        },2000);
    }

    public void button_open(){
        fab1.startAnimation(fab_open);
        fab2.startAnimation(fab_open);
        fab3.startAnimation(fab_open);
        fab1.setClickable(true);
        fab2.setClickable(true);
        fab3.setClickable(true);
        isFabOpen = true;

        text1.setVisibility(View.VISIBLE);
        text2.setVisibility(View.VISIBLE);
        text3.setVisibility(View.VISIBLE);
    }
    public void button_close(){
        fab1.startAnimation(fab_close);
        fab2.startAnimation(fab_close);
        fab3.startAnimation(fab_close);
        fab1.setClickable(false);
        fab2.setClickable(false);
        fab3.setClickable(false);
        isFabOpen = false;

        text1.setVisibility(View.INVISIBLE);
        text2.setVisibility(View.INVISIBLE);
        text3.setVisibility(View.INVISIBLE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_SCAN) {
            // String resultDisplayStr;
            if (data != null && data.hasExtra(CardIOActivity.EXTRA_SCAN_RESULT)) {
                CreditCard scanResult = data.getParcelableExtra(CardIOActivity.EXTRA_SCAN_RESULT);

                // Never log a raw card number. Avoid displaying it, but if necessary use getFormattedCardNumber()
                resultDisplayStr1 = "Card Number: " + scanResult.getRedactedCardNumber() + "\n";

                // Do something with the raw number, e.g.:
                // myService.setCardNumber( scanResult.cardNumber );

                if (scanResult.isExpiryValid()) {
                    resultDisplayStr += "Expiration Date: " + scanResult.expiryMonth + "/" + scanResult.expiryYear + "\n";

                    //cardtext.setText(resultDisplayStr);
                }

                if (scanResult.cvv != null) {
                    // Never log or display a CVV
                    resultDisplayStr += "CVV has " + scanResult.cvv.length() + " digits.\n";
                }

                if (scanResult.postalCode != null) {
                    resultDisplayStr += "Postal Code: " + scanResult.postalCode + "\n";
                }
            }
            else {
                resultDisplayStr = "Scan was canceled.";
            }
            // do something with resultDisplayStr, maybe display it in a textView

            TextView card_number=(TextView)findViewById(R.id.card_number);
            TextView card_since=(TextView)findViewById(R.id.card_since);
            card_number.setText(resultDisplayStr1);
            card_since.setText(resultDisplayStr);

        }
    }

}